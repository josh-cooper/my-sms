# frozen_string_literal: false

require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.
#
# Also compared to earlier versions of this generator, there are no longer any
# expectations of assigns and templates rendered. These features have been
# removed from Rails core in Rails 5, but can be added back in via the
# `rails-controller-testing` gem.

RSpec.describe StudentsController, type: :controller do
  let(:student) { FactoryBot.create(:student) }

  describe 'GET #index' do
    subject { get :index }
    it 'returns a success response' do
      expect(subject).to be_success
    end
  end

  describe 'GET #show' do
    subject { get :show, { id: student.to_param } }
    it 'returns a success response' do
      expect(subject).to be_success
    end
  end

  describe 'GET #new' do
    subject { get :new }
    it 'returns a success response' do
      expect(subject).to be_success
    end
  end

  describe 'GET #edit' do
    subject { get :edit, { id: student.to_param } }
    it 'returns a success response' do
      expect(subject).to be_success
    end
  end

  describe 'POST #create' do
    subject { post :create, { student: student } }

    context 'with valid params' do
      let(:student) { FactoryBot.attributes_for(:student) }

      it 'creates a new Student' do
        expect { subject }.to change(Student, :count).by(1)
      end

      it 'redirects to the created student' do
        expect(subject).to redirect_to(Student.last)
      end
    end

    context 'with invalid params' do
      let(:student) { FactoryBot.attributes_for(:student, first_name: nil) }

      it "returns a success response (i.e. to display the 'new' template)" do
        expect(subject).to be_success
      end
    end
  end

  describe 'PUT #update' do
    let(:new_student_args) { {} }
    subject do
      student = FactoryBot.create(:student)
      new_attributes = FactoryBot.attributes_for(:student, **new_student_args)
      put :update, { id: student.to_param, student: new_attributes }
    end

    context 'with valid params' do
      it 'updates the requested student' do
        subject
        student.reload
        attrs = %i[first_name last_name gender]
        student_attrs = student.attributes.fetch_values(*attrs.map(&:to_s))
        new_attrs = new_attributes.fetch_values(*attrs)
        expect(student_attrs).to eq new_attrs

      end

      it 'redirects to the student' do
        subject do
          expect(response).to redirect_to(student)
        end
      end
    end

    context 'with invalid params' do
      let(:new_student_args) { { first_name: nil } }

      it "returns a success response (i.e. to display the 'edit' template)" do
        expect(subject).to be_success
      end
    end
  end

  describe 'DELETE #destroy' do
    let(:student) { FactoryBot.create(:student) }
    subject do
      delete :destroy, { id: student.to_param }
    end

    it 'destroys the requested student' do
      expect { subject }.to change(Student, :count).by(0)
    end

    it 'redirects to the students list' do
      expect(subject).to redirect_to(students_url)
    end
  end
end
